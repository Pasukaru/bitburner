import { CUSTOM_CONSTANTS } from 'CustomConstants.ns'
import { spawnHackScripts } from 'functions.ns'
import * as formulas from 'formulas.ns'

/** 
 * @param {NS} ns 
 * */
export async function main(ns) {
	disableLogs(ns)
	while (true) {
		await hackPrimedServer(ns, ns.args[0])
		await ns.sleep(1)
	}
}

/** 
 * @param {NS} ns 
 * @param {string} targetHostname
 * @param {boolean} debug
 * **/
export async function hackPrimedServer(ns, targetHostname) {
	const sourceHostname = ns.getHostname()

	const player = getPlayerCheap(ns)
	const targetServer = getServerCheap(ns, targetHostname)

	const WeakenTime = Math.ceil(formulas.minWeakenTime(targetServer, player));
	const GrowTime = Math.ceil(formulas.minGrowTime(targetServer, player));
	const HackTime = Math.ceil(formulas.minHackTime(targetServer, player));

	const HackOffset = 10 // Hack finishes first
	const GrowOffset = 5 // Then Grow
	const WeakenOffset = 0 // Then Weaken

	const time = new Date().getTime()

	const maxRunsPerBatch = 25
	const sleepPerRun = 5
	let run = 0

	var sourceServer = getServerCheap(ns, sourceHostname)
	const cores = sourceServer.cores

	const HPercent = (formulas.minHackPercent(targetServer, player) * 100);
	const GPercent = (formulas.growPercent(targetServer, 1, player, cores, ns));
	const growThreads = Math.floor(((5 / (GPercent - 1)))) || 1;
	const hackThreads = Math.floor((50 / HPercent)) || 1;
	const difficultyIncrease = hackThreads * 0.002 + growThreads * 0.004
	const weakenThreads = Math.ceil(difficultyIncrease / formulas.weakenAnalyze(1, cores));

	const totalRamForRun = (CUSTOM_CONSTANTS.HackScriptRam * hackThreads)
		+ (CUSTOM_CONSTANTS.GrowScriptRam * growThreads)
		+ (CUSTOM_CONSTANTS.WeakenScriptRam * weakenThreads)

	const maxRam = sourceServer.maxRam
	if (totalRamForRun > maxRam) {
		ns.print("Not enough ram on " + targetServer.hostname + " - Required: " + totalRamForRun + " has: " + maxRam)
		await ns.sleep(1000)
		return
	}

	// ns.print("Starting for " + sourceServer.hostname)
	// ns.print("weakenThreads: " + weakenThreads)
	// ns.print("weakSleep: " + weakSleep)
	// ns.print("growThreads: " + growThreads)
	// ns.print("growSleep: " + growSleep)
	// ns.print("hackThreads: " + hackThreads)
	// ns.print("hackSleep: " + hackSleep)
	// ns.print("sourceServer.maxRam: " + sourceServer.maxRam)
	// ns.print("sourceServer.ramUsed: " + sourceServer.ramUsed)
	// ns.print("totalRamForRun: " + totalRamForRun)
	// ns.print("WeakenTime: " + WeakenTime)
	// ns.print("GrowTime  : " + GrowTime)
	// ns.print("HackTime  : " + HackTime)


	// Keep spawning jobs until the very first job completes
	// ns.print('Time remaining: ' + timeRemaining / 1000)
	const batchSizeRam = Math.floor((sourceServer.maxRam - sourceServer.ramUsed) / totalRamForRun)
	const batchSize = Math.min(batchSizeRam, maxRunsPerBatch)

	batchSize && ns.print('Spawning hack scripts: ' + batchSize)

	for (let i = 0; i < batchSize; i++) {
		const weakSleep = i * sleepPerRun + WeakenOffset
		const growSleep = weakSleep + WeakenTime - GrowTime - GrowOffset
		const hackSleep = weakSleep + WeakenTime - HackTime - HackOffset
		const id = time + '-' + run
		run++
		spawnHackScripts(ns, sourceHostname, targetHostname, weakenThreads, weakSleep, growThreads, growSleep, hackThreads, hackSleep, run * sleepPerRun, id)
	}

}

/** 
 * @param {NS} ns
 * @return {Player} player
 *  **/
function getPlayerCheap(ns) {
	return ns.getPlayer()
}

/** 
 * @param {NS} ns
 * @param {string} host
 * @return {Server} server
 *  **/
function getServerCheap(ns, host) {
	return ns.getServer(host)
}

/** 
 * @param {NS} ns 
 * */
function disableLogs(ns) {
	ns.disableLog("disableLog")
	ns.disableLog("sleep")
	ns.disableLog("exec")
	ns.disableLog("getServerGrowth")
	ns.disableLog("getServerSecurityLevel")
	ns.disableLog("getServerMinSecurityLevel")
	ns.disableLog("getServerRequiredHackingLevel")
	ns.disableLog("getServerMaxRam")
	ns.disableLog("getServerUsedRam")
}

export function autocomplete(data) {
	return [...data.servers]
}
