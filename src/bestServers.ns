import * as CONFIG from 'config.ns';
import * as formulas from 'formulas.ns';
import { getItem } from 'common.ns'

const settings = {
  minSecurityWeight: 100
}

/** @param {NS} ns **/
export async function getBestServers(ns, globalPrint) {
  const serverMap = getItem("BB_SERVER_MAP")
  const hackableServers = await getHackableServers(ns, serverMap.servers, globalPrint)
  const bestServers = await findTargetServer(ns, hackableServers, globalPrint)
  save(ns, bestServers)
  return bestServers
}

/** @param {NS} ns **/
function save(ns, servers) {
  const str = JSON.stringify(servers, null, 2);
  ns.print(str)
  localStorage.setItem(CONFIG.BEST_TARGETS_KEY, str)
}

const hackScripts = ['hack.ns', 'grow.ns', 'weaken.ns']

function getPlayerDetails(ns) {

  return {
    hackingLevel: ns.getHackingLevel(),
    portHacks: getItem("PORT_HACKS") || 0,
  }
}

/** @param {NS} ns **/
async function findTargetServer(ns, hosts, globalPrint) {
  var player = getPlayerCheap(ns)

  const servers = hosts
    .filter(hostname => hostname !== 'home')
    .map(hostname => getServerCheap(ns, hostname))
    .filter(server => {
      if (server.maxMoney < 1) return false
      server.minWeakenTime = formulas.minWeakenTime(server, player)
      if (server.minWeakenTime > 3 * 60 * 1000) return false
      if (server.requiredHackingSkill > player.hacking) return false
      return true
    })

  const weightedServers = servers.map(server => {
    const securityFactor = (settings.minSecurityWeight / server.minDifficulty);
    const serverValue = server.maxMoney * securityFactor;

    return {
      server,
      serverValue,
    }
  })

  weightedServers.sort((a, b) => b.serverValue - a.serverValue)

  if (globalPrint) {
    weightedServers.forEach(a => {
      const server = a.server
      const host = server.hostname.padEnd(16, ' ')
      const score = String(Math.floor(a.serverValue)).padStart(15)
      const mwt = String(Math.ceil(server.minWeakenTime / 1000)).padStart(6)
      const money = String(Math.floor(server.maxMoney)).padStart(15)
      ns.tprint(`${host} | Score: ${score} | MWT: ${mwt}s | Money: ${money}`)
    })
  }

  return weightedServers.map((a) => a.server.hostname)
}


/** @param {NS} ns **/
async function getHackableServers(ns, servers, globalPrint) {
  const playerDetails = getPlayerDetails(ns)
  const hackableServers = []
  const hostnames = Object.keys(servers);

  for (const Hostname of hostnames) {
    // if(Hostname === 'home') continue;
    // ns.print("Checking Host: " + Hostname)
    if (!ns.serverExists(Hostname)) {
      // ns.print("Server doesn't exist!")
      continue;
    }
    if (servers[Hostname].ram < 2) {
      // ns.print("Doesn't have enough RAM! (" + servers[Hostname].ram + ")")
      continue;
    };
    if (!ns.hasRootAccess(Hostname)) {
      // ns.print("No root access!")
      continue;
    }
    if (!(ns.hasRootAccess(Hostname) || servers[Hostname].ports <= playerDetails.portHacks)) {
      // ns.print("Not enough port hacks! (Has: " + servers[Hostname].ports + " | Player: " + playerDetails.portHacks)
      continue;
    }
    if (Hostname === 'home') {
      hackableServers.push(Hostname)
    } else {
      if (!await ns.hasRootAccess(Hostname)) {
        for (const hackProgram of hackPrograms) {
          if (await ns.fileExists(hackProgram, 'home')) {
            await ns[hackProgram.split('.').shift().toLocaleLowerCase()](Hostname)
          }
        }
        await ns.nuke(Hostname)
      }
      await ns.scp(hackScripts, Hostname)
      hackableServers.push(Hostname);
    }
  }

  ns.print(`Found ${hackableServers.length} hackable servers.`)

  hackableServers.sort((a, b) => {
    const ramDiff = ns.getServerMaxRam(b) - ns.getServerMaxRam(a)
    if(ramDiff !== 0) return ramDiff
    return a > b ? 1 : -1
  })

  globalPrint && ns.tprint(JSON.stringify(hackableServers, undefined, 2))

  CONFIG.setHackableServers(hackableServers);

  return hackableServers
}


/** @param {NS} ns **/
export async function main(ns) {
  const globalPrint = (ns.args[0] + '') === 'true';
  const bestServers = await getBestServers(ns, globalPrint);
  const str = JSON.stringify(bestServers, null, 2);
  localStorage.setItem(CONFIG.BEST_TARGETS_KEY, str)
}

/** 
 * @param {NS} ns
 * @param {string} host
 * @return {Server} server
 *  **/
function getServerCheap(ns, host) {
  return {
    hostname: host,
    requiredHackingSkill: ns.getServerRequiredHackingLevel(host),
    minDifficulty: ns.getServerMinSecurityLevel(host),
    hackDifficulty: ns.getServerSecurityLevel(host),
    maxMoney: ns.getServerMaxMoney(host)
  }
}

/** 
 * @param {NS} ns
 * @return {Player} player
 *  **/
function getPlayerCheap(ns) {
  return ns.getPlayer()
}
